import random
from pathlib import Path
from pydub import AudioSegment

if __name__ == "__main__":
    length = int(input(">> How many minutes: ")) * 60
    print(length)

    # Gather paths
    cwd = Path.cwd()
    slows = list(cwd.glob("slow/*.mp3"))
    fasts = list(cwd.glob("fast/*.mp3"))
    if len(slows) < 2:
        raise Exception("Not enough slow songs")
    if len(fasts) == 0:
        raise Exception("No fast songs")

    # Pick start/end songs
    random.shuffle(slows)
    slows = random.choices(slows, k=2)
    start = slows[0]
    end = slows[1]

    start_sample = AudioSegment.from_mp3(str(start))
    start_duration = start_sample.duration_seconds
    end_sample = AudioSegment.from_mp3(str(end))
    end_duration = end_sample.duration_seconds
    slow_duration = start_duration + end_duration
    print('Slow duration: {}'.format(slow_duration))

    # Gather fast sample lengths
    print("Gathering input durations (this may take a while)...")
    durations = [(str(k), AudioSegment.from_mp3(str(k)).duration_seconds) for k in fasts]

    print("Generating permutation...")
    solution = []
    random.shuffle(durations)
    current_duration = 0
    for k, v in durations:
        solution.append(k)
        current_duration += v
        if current_duration + slow_duration > length:
            print("Solution of {}s: {}".format(current_duration + slow_duration, solution))
            break

    print("Building output file...")
    out = start_sample
    for k in solution:
        out = out.append(AudioSegment.from_mp3(k).normalize(), crossfade=2000)
    out = out.append(end_sample, crossfade=2000)
    out.export('autogenerated_do_not_leaderboard.mp3', format='mp3')
    print("Done!")
